var e={d:(t,n)=>{for(var a in n)e.o(n,a)&&!e.o(t,a)&&Object.defineProperty(t,a,{enumerable:!0,get:n[a]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)},t={};e.d(t,{A:()=>u});const n="02:00",a="2024-01-01",i="Empty Notes Cleaner Log";function o(...e){console.log("[Empty Notes Cleaner]",...e)}async function l(){o("Fetching daily notes...");try{const e=window.roamAlphaAPI.q("\n      [:find (pull ?e [:node/title :block/uid])\n       :where \n       [?e :node/title ?title]]\n    "),t=new Date(a);o(`Using start date: ${t.toLocaleDateString()}`);const n=e.filter((([e])=>{const n=e.title,a=function(e){o(`Parsing daily note date for title: ${e}`);const t=null==e?void 0:e.match(/^([A-Z][a-z]+) (\d{1,2})(?:st|nd|rd|th), (\d{4})$/);if(!t)return null;const[n,a,i,l]=t,r=new Date(`${a} 1, 2000`).getMonth();return new Date(parseInt(l),r,parseInt(i))}(n);if(!a)return!1;const i=a>=t,l=a<new Date;return!(!i||!l)&&(o(`Found valid daily note: ${n} (${a.toLocaleDateString()})`),!0)})).map((([e])=>({title:e.title,uid:e.uid})));return o(`Found ${n.length} daily notes after ${t.toLocaleDateString()}`),n}catch(e){throw o("Error fetching daily notes:",e),e}}async function r(e){try{return 0===window.roamAlphaAPI.q(`\n      [:find ?string\n       :where \n       [?page :block/uid "${e}"]\n       [?block :block/page ?page]\n       [?block :block/string ?string]]\n    `).filter((e=>""!==(null==e?void 0:e.trim()))).length}catch(e){return o(`Error checking page: ${e}`),!0}}async function c(e){try{return o(`Attempting to delete page with uid: ${e}`),await window.roamAlphaAPI.data.page.delete({page:{uid:e}}),o(`Successfully deleted page with uid: ${e}`),!0}catch(t){return o(`Error deleting page with uid ${e}:`,t),!1}}let d;async function g(e){o("Starting cleaning process...");try{var t;const n=await l();o(`Found ${n.length} empty daily notes`,n);let a=0,d=[];for(const{uid:e,title:t}of n){if(!await r(e)){o(`Page ${t} (${e}) is not empty`);continue}o(`Deleting page: ${t} (${e})`);await c(e)&&(a++,d.push(t),o(`Deleted page: ${t}`))}a>0&&null!==(t=e.settings)&&void 0!==t&&t.get("enable-logging")&&await async function(e,t){o(`Creating log entry: ${t}`);try{let e;0===window.roamAlphaAPI.q(`\n      [:find ?e\n       :where [?e :node/title "${i}"]]\n    `).length?(e=await window.roamAlphaAPI.data.page.create({page:{title:i}}),o("Log page created with uid:",e)):e=window.roamAlphaAPI.q(`\n        [:find ?uid\n         :where [?e :node/title "${i}"]\n                [?e :block/uid ?uid]]\n      `)[0][0],await window.roamAlphaAPI.data.block.create({location:{"parent-uid":e,order:"first"},block:{string:t}}),o("Log entry created successfully")}catch(e){throw o("Error creating log entry:",e),e}}(0,`Cleaned ${a} empty daily notes at ${(new Date).toLocaleString()}, cleaned pages are as follows: ${d.join(", ")}`)}catch(e){o("Error during cleaning process:",e)}}function s(e,t){var a;const i=e||(null===(a=t.settings)||void 0===a?void 0:a.get("clean-time"))||n,[o,l]=i.split(":").map(Number),r=function(e,t){const n=new Date;return new Date(n.getFullYear(),n.getMonth(),n.getDate()+(60*n.getHours()+n.getMinutes()>=60*e+t?1:0),e,t,0)}(o,l),c=r.getTime()-Date.now();return d&&(clearTimeout(d),clearInterval(d)),d=setTimeout((()=>{g(t),d=setInterval((()=>g(t)),864e5)}),c),r}const u={onload:function({extensionAPI:e}){o("Plugin loading..."),o("extensionAPI",e),e.settings.panel.create(function(e,t){return{tabTitle:"Empty Notes Cleaner",settings:[{id:"clean-time",name:"Cleaning Time",description:"When to clean empty notes (24-hour format, e.g. 02:00)",action:{type:"input",placeholder:n,onChange:n=>{const a=n.target.value;if(/^([01]?[0-9]|2[0-3]):[0-5][0-9]$/.test(a)){e.settings.set("clean-time",a);try{o(`Schedule updated: Next clean scheduled for ${t(a,e).toLocaleString()}`)}catch(e){o("Error updating schedule:",e)}}else o("Invalid time format. Please use HH:MM format (e.g., 02:00)")}}},{id:"start-date",name:"Start Date",description:"Only clean empty notes after this date (YYYY-MM-DD)",action:{type:"input",placeholder:a,onChange:t=>{const n=t.target.value;/^\d{4}-\d{2}-\d{2}$/.test(n)&&!isNaN(new Date(n))?(e.settings.set("start-date",n),o(`Start date updated to: ${n}`)):o("Invalid date format. Please use YYYY-MM-DD format")}}},{id:"enable-logging",name:"Enable Logging",description:"Log cleaning activities in your graph",action:{type:"switch",onChange:t=>{const n=t.target.checked;e.settings.set("enable-logging",n)}}}]}}(e,s)),s(null,e),window.emptyNotesCleaner={cleanNow:()=>g(e),getScheduleInfo:()=>{var t,a,i;return{cleanTime:(null===(t=e.settings)||void 0===t?void 0:t.get("clean-time"))||n,enableLogging:null===(a=e.settings)||void 0===a?void 0:a.get("enable-logging"),nextRun:new Date(Date.now()+((null===(i=d)||void 0===i?void 0:i._idleTimeout)||0)).toLocaleString()}}}},onunload:function(){o("Plugin unloading..."),d&&(clearTimeout(d),clearInterval(d)),o("Plugin unloaded successfully")}};var p=t.A;export{p as default};